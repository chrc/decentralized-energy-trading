
  
//The comments and explanations are provided for an example with n households!

import "hashes/sha256/512bitPacked.code" as sha256packed

// Aggregates the combined meterDelta of Energy producing HHS.
// @param {field[n]} Energy producing HHs
// @returns {field} meterDelta of provided households
def deltaProducers(field[10] hh) -> (field):
  field delta = 0
  for field i in 0..10 do
    delta = delta + hh[i]
  endfor
  return delta

// Aggregates the combined meterDelta of Energy consuming HHS.
// @param {field[m]} Energy producing HHs
// @returns {field} meterDelta of provided households
def deltaConsumers(field[10] hh) -> (field):
  field delta = 0
  for field i in 0..10 do
    delta = delta + hh[i]
  endfor
  return delta

// Returns total energy balance of the system. Remember, this balance can be available or needed energy.
// @param {field[n]} producersBeforeNet
// @param {field[m]} consumersBeforeNet
// @returns {field} totalEnergy
def calculateTotalDelta(field[10] producersBeforeNet, field[10] consumersBeforeNet) -> (field):
  producerDelta = deltaProducers(producersBeforeNet)
  consumerDelta = deltaConsumers(consumersBeforeNet)
  field totalDelta = if (producerDelta > consumerDelta) then (producerDelta - consumerDelta) else (consumerDelta - producerDelta) fi
  return totalDelta

// Returns sum of deltas between hh and hhNet with Energy
// @param {field[n]} hh
// @param {field[n]} hhNet
// @returns {field} delta
def deltaNetProducers(field[10] hh, field[10] hhNet) -> (field):
  field delta = 0
  for field i in 0..9 do
    delta = delta + (hh[i] - hhNet[i])
  endfor
  return delta

// Returns sum of deltas between hh and hhNet without Energy
// @param {field[m]} hh
// @param {field[m]} hhNet
// @returns {field} delta
def deltaNetConsumers(field[10] hh, field[10] hhNet) -> (field):
  field delta = 0
  for field i in 0..10 do
    delta = delta + (hh[i] - hhNet[i])
  endfor
  return delta

// Returns errorCounter. Implements weak fairness invariant for HHs with Energy
// @param {field[n]} hh
// @param {field[n]} hhNet
// @returns {field} errorCounter
def validateFairnessProducers(field[10] hh, field[10] hhNet) -> (field):
  field errorCounter = 0
  for field i in 0..9 do
    errorCounter = errorCounter + if hhNet[i] > hh[i] then 1 else 0 fi
  endfor
  return errorCounter

// Returns errorCounter. Implements weak fairness invariant for HHs without Energy
// @param {field[m]} hh
// @param {field[m]} hhNet
// @returns {field} errorCounter
def validateFairnessConsumers(field[10] hh, field[10] hhNet) -> (field):
  field errorCounter = 0
  for field i in 0..10 do
    errorCounter = errorCounter + if hhNet[i] > hh[i] then 1 else 0 fi
  endfor
  return errorCounter

// Validates the zero-net property (one set of household will be 0 (up to an epislon error) after netting)
// for the case of sumProducers <= sumConsumers
// Is valid, only if returns 0.
// @param (field[n]) household party having energy
// @param epsilon the error tolerance value
def validateZeroNetProducers(field[10] hh, field epsilon) -> (field):
  field errorCounter = 0
  for field i in 0..10 do
    errorCounter = errorCounter + if hh[i] > epsilon then 1 else 0 fi
  endfor
  return errorCounter

// Validates the zero-net property (one set of household will be 0 (up to an epislon error) after netting)
// for the case of sumProducers >= sumConsumers
// Is valid, only if returns 0.
// @param (field[m]) household party needing
// @param epsilon the error tolerance value
def validateZeroNetConsumers(field[10] hh, field epsilon) -> (field):
  field errorCounter = 0
  for field i in 0..10 do
    errorCounter = errorCounter + if hh[i] > epsilon then 1 else 0 fi
  endfor
  return errorCounter

// Simply return hh[0] + hh[1] for any array of households with energy.
// @param (field[n]) hh
// @returns (field) energy of provided households
def sumProducers(field[10] hh) -> (field):
  field s = 0
  for field i in 0..10 do
    s = s + hh[i]
  endfor
  return s

// Simply return hh[0] + hh[1] for any array of households without energy.
// @param (field[m]) hh
// @returns (field) energy of provided households
def sumConsumers(field[10] hh) -> (field):
  field s = 0
  for field i in 0..10 do
    s = s + hh[i]
  endfor
  return s


// Returns sha256packed hash if settlement result is consistent and proportional fair up to epsilon = (number of households - 1)
// Assume n = 4 households, where |householdListProducers| = 2 and |householdListConsumers| = 2
// Before settlement, households with produce-consume = 0 are not part of the settlement
// @param (private field[2]) producersBeforeNet before settlement
// Index represents household and producersBeforeNet[index] := produce-consume > 0 
// @param (private field[2]) consumersBeforeNet before settlement
// Index represents household and consumersBeforeNet[index] := produce-consume < 0 
// @param (private field[2]) producersAfterNet after settlement
// Index represents household and producersAfterNet[index] := produce-consume > 0 
// @param (private field[2]) consumersAfterNet after settlement
// Index represents household and consumersAfterNet[index] := produce-consume < 0
// @returns (field[2], field[2], field[2], field[2], field[2],...) sha256packed hashes of producersBeforeNetPacked and consumersBeforeNetPacked and sha256packed hash that depends on inputs
def main(private field[10] producersBeforeNet, private field[10] consumersBeforeNet, private field[10] producersAfterNet, private field[10] consumersAfterNet) -> (field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2],field[2]):
  totalDelta = calculateTotalDelta(producersBeforeNet, consumersBeforeNet)
  totalDeltaNet = calculateTotalDelta(producersAfterNet, consumersAfterNet)
  totalDelta == totalDeltaNet

  0 == validateFairnessProducers(producersBeforeNet, producersAfterNet)
  0 == validateFairnessConsumers(consumersBeforeNet, consumersAfterNet)

  field sumProducers = sumProducers(producersAfterNet)
  field sumConsumers = sumConsumers(consumersAfterNet)

  field[10] zeroNetPartyProducers = producersAfterNet
  field[10] zeroNetPartyConsumers = consumersAfterNet

  0 == if sumProducers <= sumConsumers then validateZeroNetProducers(zeroNetPartyProducers, 19) else validateZeroNetConsumers(zeroNetPartyConsumers, 19) fi// Can make epsilon more accurate in the future
  field[2] hh1ProducersBeforeNetHash = if producersBeforeNet[0] == 0 then [0, 0] else sha256packed([0, 0, 0, producersBeforeNet[0]]) fi
  field[2] hh1ProducersAfterNetHash = if producersAfterNet[0] == 0 then [0, 0] else sha256packed([0, 0, 0, producersAfterNet[0]]) fi
  field[2] hh2ProducersBeforeNetHash = if producersBeforeNet[1] == 0 then [0, 0] else sha256packed([0, 0, 0, producersBeforeNet[1]]) fi
  field[2] hh2ProducersAfterNetHash = if producersAfterNet[1] == 0 then [0, 0] else sha256packed([0, 0, 0, producersAfterNet[1]]) fi
  field[2] hh3ProducersBeforeNetHash = if producersBeforeNet[2] == 0 then [0, 0] else sha256packed([0, 0, 0, producersBeforeNet[2]]) fi
  field[2] hh3ProducersAfterNetHash = if producersAfterNet[2] == 0 then [0, 0] else sha256packed([0, 0, 0, producersAfterNet[2]]) fi
  field[2] hh4ProducersBeforeNetHash = if producersBeforeNet[3] == 0 then [0, 0] else sha256packed([0, 0, 0, producersBeforeNet[3]]) fi
  field[2] hh4ProducersAfterNetHash = if producersAfterNet[3] == 0 then [0, 0] else sha256packed([0, 0, 0, producersAfterNet[3]]) fi
  field[2] hh5ProducersBeforeNetHash = if producersBeforeNet[4] == 0 then [0, 0] else sha256packed([0, 0, 0, producersBeforeNet[4]]) fi
  field[2] hh5ProducersAfterNetHash = if producersAfterNet[4] == 0 then [0, 0] else sha256packed([0, 0, 0, producersAfterNet[4]]) fi
  field[2] hh6ProducersBeforeNetHash = if producersBeforeNet[5] == 0 then [0, 0] else sha256packed([0, 0, 0, producersBeforeNet[5]]) fi
  field[2] hh6ProducersAfterNetHash = if producersAfterNet[5] == 0 then [0, 0] else sha256packed([0, 0, 0, producersAfterNet[5]]) fi
  field[2] hh7ProducersBeforeNetHash = if producersBeforeNet[6] == 0 then [0, 0] else sha256packed([0, 0, 0, producersBeforeNet[6]]) fi
  field[2] hh7ProducersAfterNetHash = if producersAfterNet[6] == 0 then [0, 0] else sha256packed([0, 0, 0, producersAfterNet[6]]) fi
  field[2] hh8ProducersBeforeNetHash = if producersBeforeNet[7] == 0 then [0, 0] else sha256packed([0, 0, 0, producersBeforeNet[7]]) fi
  field[2] hh8ProducersAfterNetHash = if producersAfterNet[7] == 0 then [0, 0] else sha256packed([0, 0, 0, producersAfterNet[7]]) fi
  field[2] hh9ProducersBeforeNetHash = if producersBeforeNet[8] == 0 then [0, 0] else sha256packed([0, 0, 0, producersBeforeNet[8]]) fi
  field[2] hh9ProducersAfterNetHash = if producersAfterNet[8] == 0 then [0, 0] else sha256packed([0, 0, 0, producersAfterNet[8]]) fi
  field[2] hh10ProducersBeforeNetHash = if producersBeforeNet[9] == 0 then [0, 0] else sha256packed([0, 0, 0, producersBeforeNet[9]]) fi
  field[2] hh10ProducersAfterNetHash = if producersAfterNet[9] == 0 then [0, 0] else sha256packed([0, 0, 0, producersAfterNet[9]]) fi
  field[2] hh1ConsumersBeforeNetHash = if consumersBeforeNet[0] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersBeforeNet[0]]) fi
  field[2] hh1ConsumersAfterNetHash = if consumersAfterNet[0] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersAfterNet[0]]) fi
  field[2] hh2ConsumersBeforeNetHash = if consumersBeforeNet[1] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersBeforeNet[1]]) fi
  field[2] hh2ConsumersAfterNetHash = if consumersAfterNet[1] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersAfterNet[1]]) fi
  field[2] hh3ConsumersBeforeNetHash = if consumersBeforeNet[2] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersBeforeNet[2]]) fi
  field[2] hh3ConsumersAfterNetHash = if consumersAfterNet[2] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersAfterNet[2]]) fi
  field[2] hh4ConsumersBeforeNetHash = if consumersBeforeNet[3] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersBeforeNet[3]]) fi
  field[2] hh4ConsumersAfterNetHash = if consumersAfterNet[3] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersAfterNet[3]]) fi
  field[2] hh5ConsumersBeforeNetHash = if consumersBeforeNet[4] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersBeforeNet[4]]) fi
  field[2] hh5ConsumersAfterNetHash = if consumersAfterNet[4] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersAfterNet[4]]) fi
  field[2] hh6ConsumersBeforeNetHash = if consumersBeforeNet[5] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersBeforeNet[5]]) fi
  field[2] hh6ConsumersAfterNetHash = if consumersAfterNet[5] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersAfterNet[5]]) fi
  field[2] hh7ConsumersBeforeNetHash = if consumersBeforeNet[6] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersBeforeNet[6]]) fi
  field[2] hh7ConsumersAfterNetHash = if consumersAfterNet[6] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersAfterNet[6]]) fi
  field[2] hh8ConsumersBeforeNetHash = if consumersBeforeNet[7] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersBeforeNet[7]]) fi
  field[2] hh8ConsumersAfterNetHash = if consumersAfterNet[7] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersAfterNet[7]]) fi
  field[2] hh9ConsumersBeforeNetHash = if consumersBeforeNet[8] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersBeforeNet[8]]) fi
  field[2] hh9ConsumersAfterNetHash = if consumersAfterNet[8] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersAfterNet[8]]) fi
  field[2] hh10ConsumersBeforeNetHash = if consumersBeforeNet[9] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersBeforeNet[9]]) fi
  field[2] hh10ConsumersAfterNetHash = if consumersAfterNet[9] == 0 then [0, 0] else sha256packed([0, 0, 0, consumersAfterNet[9]]) fi
  return  hh1ProducersBeforeNetHash, hh2ProducersBeforeNetHash, hh3ProducersBeforeNetHash, hh4ProducersBeforeNetHash, hh5ProducersBeforeNetHash, hh6ProducersBeforeNetHash, hh7ProducersBeforeNetHash, hh8ProducersBeforeNetHash, hh9ProducersBeforeNetHash, hh10ProducersBeforeNetHash, hh1ConsumersBeforeNetHash, hh2ConsumersBeforeNetHash, hh3ConsumersBeforeNetHash, hh4ConsumersBeforeNetHash, hh5ConsumersBeforeNetHash, hh6ConsumersBeforeNetHash, hh7ConsumersBeforeNetHash, hh8ConsumersBeforeNetHash, hh9ConsumersBeforeNetHash, hh10ConsumersBeforeNetHash, hh1ProducersAfterNetHash, hh2ProducersAfterNetHash, hh3ProducersAfterNetHash, hh4ProducersAfterNetHash, hh5ProducersAfterNetHash, hh6ProducersAfterNetHash, hh7ProducersAfterNetHash, hh8ProducersAfterNetHash, hh9ProducersAfterNetHash, hh10ProducersAfterNetHash, hh1ConsumersAfterNetHash, hh2ConsumersAfterNetHash, hh3ConsumersAfterNetHash, hh4ConsumersAfterNetHash, hh5ConsumersAfterNetHash, hh6ConsumersAfterNetHash, hh7ConsumersAfterNetHash, hh8ConsumersAfterNetHash, hh9ConsumersAfterNetHash, hh10ConsumersAfterNetHash
